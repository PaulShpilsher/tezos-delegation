// Code generated by MockGen. DO NOT EDIT.
// Source: tezos-delegation/internal/db (interfaces: DelegationRepositoryPort)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "tezos-delegation/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockDelegationRepositoryPort is a mock of DelegationRepositoryPort interface.
type MockDelegationRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationRepositoryPortMockRecorder
}

// MockDelegationRepositoryPortMockRecorder is the mock recorder for MockDelegationRepositoryPort.
type MockDelegationRepositoryPortMockRecorder struct {
	mock *MockDelegationRepositoryPort
}

// NewMockDelegationRepositoryPort creates a new mock instance.
func NewMockDelegationRepositoryPort(ctrl *gomock.Controller) *MockDelegationRepositoryPort {
	mock := &MockDelegationRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockDelegationRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegationRepositoryPort) EXPECT() *MockDelegationRepositoryPortMockRecorder {
	return m.recorder
}

// GetLatestTzktID mocks base method.
func (m *MockDelegationRepositoryPort) GetLatestTzktID(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTzktID", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTzktID indicates an expected call of GetLatestTzktID.
func (mr *MockDelegationRepositoryPortMockRecorder) GetLatestTzktID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTzktID", reflect.TypeOf((*MockDelegationRepositoryPort)(nil).GetLatestTzktID), arg0)
}

// InsertDelegations mocks base method.
func (m *MockDelegationRepositoryPort) InsertDelegations(arg0 []*model.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDelegations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDelegations indicates an expected call of InsertDelegations.
func (mr *MockDelegationRepositoryPortMockRecorder) InsertDelegations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDelegations", reflect.TypeOf((*MockDelegationRepositoryPort)(nil).InsertDelegations), arg0)
}

// ListDelegations mocks base method.
func (m *MockDelegationRepositoryPort) ListDelegations(arg0 context.Context, arg1, arg2 int, arg3 *int) ([]model.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegations indicates an expected call of ListDelegations.
func (mr *MockDelegationRepositoryPortMockRecorder) ListDelegations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegations", reflect.TypeOf((*MockDelegationRepositoryPort)(nil).ListDelegations), arg0, arg1, arg2, arg3)
}
